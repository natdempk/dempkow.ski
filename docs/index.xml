<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Nat Dempkowski</title>
    <link>https://dempkow.ski/</link>
    <description>Recent content in Home on Nat Dempkowski</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 02 Feb 2025 15:05:41 -0500</lastBuildDate>
    <atom:link href="https://dempkow.ski/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Django Prefetch Related Objects: Why Am I Still Seeing N&#43;1 Queries with prefetch_related_objects?</title>
      <link>https://dempkow.ski/blog/django-prefetch-related-objects/</link>
      <pubDate>Sun, 02 Feb 2025 15:05:41 -0500</pubDate>
      <guid>https://dempkow.ski/blog/django-prefetch-related-objects/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been working on a project that uses Django&amp;rsquo;s ORM heavily and running into a lot of N+1 queries. An N+1 query is a side effect of the &amp;ldquo;magic&amp;rdquo; (runtime binding/resolution &amp;#x1f644;) that the Django ORM enables where accessing fields on a &lt;code&gt;Model&lt;/code&gt; that correspond to other related models.&lt;/p&gt;&#xA;&lt;p&gt;This means you can easily write code like this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#575279;background-color:#faf4ed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#286983&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#d7827e&#34;&gt;book&lt;/span&gt; &lt;span style=&#34;color:#797593&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#d7827e&#34;&gt;Book&lt;/span&gt;&lt;span style=&#34;color:#797593&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#d7827e&#34;&gt;objects&lt;/span&gt;&lt;span style=&#34;color:#797593&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#d7827e&#34;&gt;all&lt;/span&gt;&lt;span style=&#34;color:#797593&#34;&gt;():&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#d7827e&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#797593&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d7827e&#34;&gt;book&lt;/span&gt;&lt;span style=&#34;color:#797593&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#d7827e&#34;&gt;author&lt;/span&gt;&lt;span style=&#34;color:#797593&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This lets you easily access related objects, here assuming that book and author are modeled as two related objects with a DB-layer relationship between them. This is &amp;ldquo;desirable&amp;rdquo; behavior because it makes writing your application code &amp;ldquo;easier&amp;rdquo;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java&#39;s CompleteableFuture exception handling: whenComplete vs. handle</title>
      <link>https://dempkow.ski/blog/java-completablefuture-exception-handling/</link>
      <pubDate>Fri, 20 Oct 2017 23:00:15 -0400</pubDate>
      <guid>https://dempkow.ski/blog/java-completablefuture-exception-handling/</guid>
      <description>&lt;p&gt;Today I learned about the behavior of thrown exceptions within asynchronous code using Java&amp;rsquo;s CompletableFutures.&lt;/p&gt;&#xA;&lt;p&gt;The question I had was:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Is it possible to have a CompletableFuture which calls something like &lt;code&gt;.handle()&lt;/code&gt;, but returns &lt;code&gt;Void&lt;/code&gt;?&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;I was writing code that wanted to basically handle exceptional cases, but not propagate those exceptions outwards.&lt;/p&gt;&#xA;&lt;p&gt;I had written something like:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#575279;background-color:#faf4ed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d7827e&#34;&gt;CompletableFuture&lt;/span&gt;&lt;span style=&#34;color:#797593&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#d7827e&#34;&gt;supplyAsync&lt;/span&gt;&lt;span style=&#34;color:#797593&#34;&gt;(()&lt;/span&gt; &lt;span style=&#34;color:#797593&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#797593&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#286983&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#286983&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#d7827e&#34;&gt;RuntimeException&lt;/span&gt;&lt;span style=&#34;color:#797593&#34;&gt;();&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#797593&#34;&gt;}).&lt;/span&gt;&lt;span style=&#34;color:#d7827e&#34;&gt;handle&lt;/span&gt;&lt;span style=&#34;color:#797593&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#d7827e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#797593&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d7827e&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#797593&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#797593&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#797593&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#286983&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#797593&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d7827e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#797593&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#286983&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#797593&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#797593&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#286983&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#286983&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#d7827e&#34;&gt;RuntimeException&lt;/span&gt;&lt;span style=&#34;color:#797593&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d7827e&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#797593&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#797593&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#286983&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#797593&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#d7827e&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#797593&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#d7827e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#797593&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#d7827e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#797593&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d7827e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#797593&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#286983&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#d7827e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#797593&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#797593&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#797593&#34;&gt;}).&lt;/span&gt;&lt;span style=&#34;color:#d7827e&#34;&gt;join&lt;/span&gt;&lt;span style=&#34;color:#797593&#34;&gt;();&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And since &lt;code&gt;handle&lt;/code&gt; is defined as taking in a &lt;code&gt;BiFunction: (T, Throwable) -&amp;gt; U&lt;/code&gt;:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
